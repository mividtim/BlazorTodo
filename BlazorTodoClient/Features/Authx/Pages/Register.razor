@page "/Register"

@using BlazorTodoDtos.Authx
@using BlazorTodoClient.Features.Authx.Store

@inject IState<AuthxState> AuthxState
@inject IAuthxService AuthxService
@inject IGoogleService GoogleService
@inject IJSRuntime JsRuntime

<h3>Registration</h3>

@if (AuthxState.Value.HasCurrentErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@AuthxState.Value.CurrentErrorMessage</p>
    </div>
}
<EditForm Model="_createUserDto" OnValidSubmit="ExecuteRegister" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="_createUserDto.Email" />
            <ValidationMessage For="@(() => _createUserDto.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="_createUserDto.Password" />
            <ValidationMessage For="@(() => _createUserDto.Password)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="givenName" class="col-md-2 col-form-label">Given Name:</label>
        <div class="col-md-10">
            <InputText id="givenName" class="form-control" @bind-Value="_createUserDto.GivenName" />
            <ValidationMessage For="@(() => _createUserDto.GivenName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="givenName" class="col-md-2 col-form-label">Surname:</label>
        <div class="col-md-10">
            <InputText id="surname" class="form-control" @bind-Value="_createUserDto.Surname" />
            <ValidationMessage For="@(() => _createUserDto.Surname)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="givenName" class="col-md-2 col-form-label">Name Order:</label>
        <div class="col-md-10">
            <InputSelect id="nameOrder" class="form-control" @bind-Value="_createUserDto.NameOrder">
                <option value="@ENameOrder.GivenNameFirst">Given Name First</option>
                <option value="@ENameOrder.SurnameFirst">Surname First</option>
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="preferredName" class="col-md-2 col-form-label">Preferred Name:</label>
        <div class="col-md-10">
            <InputText id="preferredName" class="form-control" @bind-Value="_createUserDto.PreferredName" />
            <ValidationMessage For="@(() => _createUserDto.PreferredName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="phoneNumber" class="col-md-2 col-form-label">Phone Number:</label>
        <div class="col-md-10">
            <InputText type="phoneNumber" id="phoneNumber" class="form-control" @bind-Value="_createUserDto.PhoneNumber" />
            <ValidationMessage For="@(() => _createUserDto.PhoneNumber)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Register</button>
        </div>
    </div>
        <div class="row">
            <div class="col-md-12 text-right">
                <div
                    id="g_id_onload"
                    data-client_id="@GoogleService.ClientId"
                    data-callback="completeGoogleSignIn"
                    data-auto_prompt="false"
                    data-text="Register with Google">
                </div>
                <div
                    class="g_id_signin"
                    data-type="standard"
                    data-size="large"
                    data-theme="outline"
                    data-text="sign_in_with"
                    data-shape="rectangular"
                    data-logo_alignment="left">
                </div>
            </div>
        </div>
</EditForm>

@code {
    private readonly CreateUserDto _createUserDto = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await JsRuntime.InvokeVoidAsync("eval", @"
            window.refToLogin = null;
            if (!window.setupGoogleSignIn) {
                window.setupGoogleSignIn = function(ref) {
                    refToLogin = ref;
                    const script = document.createElement('script');
                    script.src = 'https://accounts.google.com/gsi/client';
                    script.async = true;
                    script.defer = true;
                    document.body.append(script);
                };
            }
            if (!window.completeGoogleSignIn) {
                window.completeGoogleSignIn = async function(response) {
                    while (refToLogin === null) await new Promise(resolve => setTimeout(resolve, 10));
                    refToLogin.invokeMethodAsync('ExecuteLoginWithGoogle', response.credential);
                }
            }
        ");
        await JsRuntime.InvokeVoidAsync(
            "window.setupGoogleSignIn",
            DotNetObjectReference.Create(this));
    }

    private void ExecuteRegister() => AuthxService.Register(_createUserDto);
    
    [JSInvokable]
    public void ExecuteLoginWithGoogle(string credential) => AuthxService.LoginWithGoogle(credential);
}