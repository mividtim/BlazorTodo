@page "/Login"

@using BlazorTodoClient.Features.Authx.Store
@using BlazorTodoDtos.Authx

@inject IState<AuthxState> AuthxState
@inject IAuthxService AuthxService

<h3>Login</h3>
@if (AuthxState.Value.CurrentErrorMessage is not null)
{
    <div class="alert alert-danger" role="alert">
        <p>@AuthxState.Value.CurrentErrorMessage</p>
    </div>
}
<EditForm Model="_userForAuthentication" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="_userForAuthentication.UserName" />
            <ValidationMessage For="@(() => _userForAuthentication.UserName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="_userForAuthentication.Password" />
            <ValidationMessage For="@(() => _userForAuthentication.Password)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Login</button>
        </div>
    </div>
</EditForm>

@code {
    private readonly CreateAuthxTokensDto _userForAuthentication = new();

    private void ExecuteLogin() => AuthxService.Login(_userForAuthentication);
}