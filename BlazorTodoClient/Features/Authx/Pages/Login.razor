@page "/Login"

@using BlazorTodoClient.Features.Authx.Store
@using BlazorTodoDtos.Authx

@inject IState<AuthxState> AuthxState
@inject IAuthxService AuthxService
@inject IGoogleService GoogleService
@inject IJSRuntime JsRuntime

<h3>Login</h3>
@if (AuthxState.Value.CurrentErrorMessage is not null)
{
    <div class="alert alert-danger" role="alert">
        <p>@AuthxState.Value.CurrentErrorMessage</p>
    </div>
}
<EditForm Model="_userForAuthentication" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="_userForAuthentication.UserName" />
            <ValidationMessage For="@(() => _userForAuthentication.UserName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="_userForAuthentication.Password" />
            <ValidationMessage For="@(() => _userForAuthentication.Password)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Login</button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <div
                id="g_id_onload"
                data-client_id="@GoogleService.ClientId"
                data-callback="completeGoogleSignIn"
                data-auto_prompt="false"
                data-text="Log in with Google">
            </div>
            <div
                class="g_id_signin"
                data-type="standard"
                data-size="large"
                data-theme="outline"
                data-text="sign_in_with"
                data-shape="rectangular"
                data-logo_alignment="left">
            </div>
        </div>
    </div>
</EditForm>

@code {
    private readonly CreateAuthxTokensDto _userForAuthentication = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await JsRuntime.InvokeVoidAsync("eval", @"
            window.refToLogin = null;
            if (!window.setupGoogleSignIn) {
                window.setupGoogleSignIn = function(ref) {
                    refToLogin = ref;
                    const script = document.createElement('script');
                    script.src = 'https://accounts.google.com/gsi/client';
                    script.async = true;
                    script.defer = true;
                    document.body.append(script);
                };
            }
            if (!window.completeGoogleSignIn) {
                window.completeGoogleSignIn = async function(response) {
                    while (refToLogin === null) await new Promise(resolve => setTimeout(resolve, 10));
                    refToLogin.invokeMethodAsync('ExecuteLoginWithGoogle', response.credential);
                }
            }
        ");
        await JsRuntime.InvokeVoidAsync(
            "window.setupGoogleSignIn",
            DotNetObjectReference.Create(this));
    }

    private void ExecuteLogin() => AuthxService.Login(_userForAuthentication);
    
    [JSInvokable]
    public void ExecuteLoginWithGoogle(string credential) => AuthxService.LoginWithGoogle(credential);
}