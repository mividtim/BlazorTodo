@inherits BlazorTodoClient.Features.Authx.Components.AuthxRequiredComponent

@page "/todos/{todoId}"

@using BlazorTodoClient.Features.Todos.Models.Validation
@using BlazorTodoClient.Features.Todos.Store

@inject IState<TodosState> TodosState
@inject ITodosService TodosService

<h3 class="text-center mb-3">Detail for to-do item @(TodosState.Value.CurrentTodo?.Title ?? TodoId)</h3>

@if (TodosState.Value.IsLoading)
{
    <div class="d-flex flex-row justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (TodosState.Value.HasCurrentErrors || TodosState.Value.CurrentTodo is null)
{
    <div class="d-flex flex-column align-items-center">
        <span>Whoops! Looks like an issue occurred loading todos :(</span>
        <div class="py-3">
            <a class="btn btn-primary" href="/todos">Back to Todos</a>
        </div>
    </div>
}
else
{
    <EditForm Model="_validationModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="d-flex flex-column align-items-center">
            <ValidationSummary />
        </div>
        <div class="d-flex flex-column align-items-center py-1">
            <div class="py-2 d-flex flex-row align-items-center">
                <strong class="px-2">Completed:</strong>
                <InputCheckbox class="form-check" @bind-Value="_validationModel.Completed" />
            </div>
            <div class="py-2 d-flex flex-row align-items-center">
                <strong class="px-2">Title:</strong>
                <InputText class="form-control" @bind-Value="_validationModel.Title" />
            </div>
            <div class="d-flex flex-row justify-content-center pt-2">
                <button type="submit" class="btn btn-secondary">Update</button>
                <span class="px-2"></span>
                <button class="btn btn-danger" @onclick="() => TodosService.DeleteTodo(TodosState.Value.CurrentTodo.Id)">Delete</button>
            </div>
            <div class="py-3">
                <a class="btn btn-primary" href="/todos">Back to Todos</a>
            </div>
        </div>
    </EditForm>
}

@code {
    private readonly CreateOrUpdateTodoValidationModel _validationModel = new();

    [Parameter]
    public string? TodoId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        // Issue the load todos command, if no current todos have been loaded
        if (TodosState.Value.CurrentTodos is null)
            TodosService.LoadTodos();
        // Load the to-do detail on initial page navigation
        if (Guid.TryParse(TodoId, out var parsedId))
            TodosService.LoadTodoById(parsedId);
        // Register a state change to assign the validation fields
        TodosState.StateChanged += (sender, _) =>
        {
            var state = sender as State<TodosState>;
            if (state?.Value.CurrentTodo is null) return;
            _validationModel.Title = state.Value.CurrentTodo.Title ?? "missing";
            _validationModel.Completed = state.Value.CurrentTodo.Completed;
            StateHasChanged();
        };
    }

    private void HandleValidSubmit()
    {
        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null
        TodosService.UpdateTodo(TodosState.Value.CurrentTodo!.Id, _validationModel.Title!, _validationModel.Completed);
    }
}